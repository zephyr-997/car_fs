C251 COMPILER V5.60.0,  main                                                               13/05/25  11:31:27  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,S
                    -PEED) BROWSE INCDIR(..\CODE;..\USER\inc;..\USER\src;..\seekfree_components;..\seekfree_libraries;..\seekfree_peripheral;
                    -..\libraries) DEBUG PRINT(.\Out_File\main.lst) TABS(2) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          extern uint8_t track_ten_cnt;
    4          
    5          void main(void)
    6          {
    7   1        int state = 5;
    8   1        uint16 sum_value = 0;    //
    9   1        uint16 value[7] = {0};   //调试用数组
   10   1        
   11   1        board_init();     
   12   1        electromagnetic_init();  //初始化电磁传感器
   13   1        
   14   1        // ips114_init_simspi();          
   15   1        uart_init(UART_4, UART4_RX_P02, UART4_TX_P03, 115200, TIM_4);
   16   1        
   17   1        motor_init();
   18   1        encoder_init();
   19   1        
   20   1        imu963ra_init();
   21   1        
   22   1        pid_init(&LeftPID, 140.0f, 0.2f, 0.0f, 0.0f, 0.0f, 7500.0f);
   23   1        pid_init(&RightPID, 140.0f, 0.2f, 0.0f, 0.0f, 0.0f, 7500.0f);
   24   1        pid_init(&TurnPID, 1.8f, 0.0f, 0.0f, 0.0f, 0.0f, 100.0f);
   25   1        
   26   1        LowPass_init(&leftSpeedFilt, 0.556);   //初始化低通滤波器
   27   1        LowPass_init(&rightSpeedFilt, 0.556);
   28   1        
   29   1        Kalman_Init(&imu693_kf, 0.98, 0.02, imu693kf_Q, imu693kf_R, 0.0);
   30   1        
   31   1        pit_timer_ms(TIM_1, 10);
   32   1        pit_timer_ms(TIM_2, 5);
   33   1        
   34   1        // ips114_clear_simspi(WHITE);   //清屏
   35   1        delay_ms(100); // 延时等待系统稳定
   36   1        
   37   1          while(1)
   38   1        {
   39   2          
   40   2          /* 串口接收 */
   41   2          if(g_RxPointer != 0)
   42   2          {
   43   3            int temp = g_RxPointer;
   44   3            delay_ms(4);
   45   3            if(temp == g_RxPointer)
   46   3            {
   47   4              uart4_interrupt_callback();
   48   4            }
   49   3          }
   50   2          
   51   2          
   52   2          /* 定时操作 */
   53   2          if (flag == 1)
   54   2          {
   55   3      //      if (g_SpeedPoint == 20)
   56   3      //      {
   57   3      //        g_SpeedPoint = 50;
C251 COMPILER V5.60.0,  main                                                               13/05/25  11:31:27  PAGE 2   

   58   3      //      }
   59   3      //      else if (g_SpeedPoint == 50)
   60   3      //      {
   61   3      //        g_SpeedPoint = 20;
   62   3      //      }
   63   3            
   64   3            flag = 0;
   65   3          }
   66   2          
   67   2          /* 按键处理 */
   68   2          key_task();
   69   2      
   70   2          if (uartSendFlag == 1)
   71   2          {
   72   3      //      sprintf(g_TxData,"%d,%d,%d,%d,%d,%d,%ld,%ld\n",
   73   3      //          g_LeftPoint,
   74   3      //          g_EncoderLeft,
   75   3      //          g_RightPoint,
   76   3      //          g_EncoderRight,
   77   3      //          position,
   78   3      //          (int)turn_pid,
   79   3      //          g_DutyLeft,
   80   3      //          g_DutyRight);
   81   3      //      uart_putstr(UART_4, g_TxData);
   82   3                
   83   3      //      sprintf(g_TxData,"%.2f,%.2f,%.2f,%.4f,%.4f,%.4f,%.4f\n",
   84   3      //          (float)g_LeftPoint,
   85   3      //          (float)g_EncoderLeft,
   86   3      //          (float)g_DutyLeft,
   87   3      //          LeftPID.error,
   88   3      //          LeftPID.lasterror,
   89   3      //          LeftPID.p_out,
   90   3      //          LeftPID.output
   91   3      //      );
   92   3      //      uart_putstr(UART_4, g_TxData);
   93   3            
   94   3      //      sprintf(g_TxData,"%d,%d,%d,%d\n",g_encoleft_init,g_encoright_init,g_EncoderLeft,g_EncoderRight);
   95   3      //      uart_putstr(UART_4, g_TxData);
   96   3            
   97   3      //      sprintf(g_TxData, "%f,%f\n",Gyro_Z,filtered_GyroZ);
   98   3      //      uart_putstr(UART_4, g_TxData);
   99   3            
  100   3            // 通过串口输出七电感数据
  101   3            sprintf(g_TxData, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
  102   3             (uint16)normalized_data[SENSOR_HL], 
  103   3             (uint16)normalized_data[SENSOR_VL], 
  104   3             (uint16)normalized_data[SENSOR_HML], 
  105   3             (uint16)normalized_data[SENSOR_HC],
  106   3             (uint16)normalized_data[SENSOR_HMR], 
  107   3             (uint16)normalized_data[SENSOR_VR], 
  108   3             (uint16)normalized_data[SENSOR_HR], 
  109   3              position,
  110   3             (uint16)signal_strength_value,
  111   3              track_type,
  112   3              track_route,
  113   3              track_route_status,
  114   3              g_intencoderL,
  115   3              g_intencoderR);
  116   3             uart_putstr(UART_4, g_TxData);
  117   3          }
  118   2          
  119   2          // 获取滤波后的ADC数据    
  120   2          mid_filter();      // 使用中位值滤波获取电感数据
  121   2      
  122   2          // 归一化电感数组
  123   2          normalize_sensors();
C251 COMPILER V5.60.0,  main                                                               13/05/25  11:31:27  PAGE 3   

  124   2          
  125   2          // 计算位置偏差
  126   2          position = calculate_position_improved();
  127   2          
  128   2          //检查电磁保护
  129   2          protection_flag = check_electromagnetic_protection();
  130   2      
  131   2          // if(protection_flag)
  132   2          // {
  133   2          //  // 触发保护，停车
  134   2          //  // 这里需要添加控制电机停止的代码
  135   2            
  136   2          //  // 显示保护触发信息
  137   2          //  ips114_showstr_simspi(0, 7, "Protection: Out of Track!");
  138   2            
  139   2          //  // 永久停车或等待重置
  140   2          //  while(1)                                                               
  141   2          //  {
  142   2          //    delay_ms(100);
  143   2          //  }
  144   2          // }
  145   2          
  146   2          // 显示电磁传感器数据
  147   2      //    display_electromagnetic_data();
  148   2      
  149   2          /*调试功能*/
  150   2      #if 0
                    //读取七电感ADC值（用于调试）
                   value[0] = adc_once(ADC_HL,  ADC_10BIT);
                   value[1] = adc_once(ADC_VL,  ADC_10BIT);
                   value[2] = adc_once(ADC_HML, ADC_10BIT);
                   value[3] = adc_once(ADC_HC,  ADC_10BIT); 
                   value[4] = adc_once(ADC_HMR, ADC_10BIT);
                   value[5] = adc_once(ADC_VR,  ADC_10BIT);
                   value[6] = adc_once(ADC_HR,  ADC_10BIT);  
               
                   // 计算所有电感值的总和
               //    sum_value = (uint16)normalized_data[SENSOR_HL] + (uint16)normalized_data[SENSOR_VL] + 
               //                (uint16)normalized_data[SENSOR_HML] + (uint16)normalized_data[SENSOR_HC] + 
               //                (uint16)normalized_data[SENSOR_HMR] + (uint16)normalized_data[SENSOR_VR] + 
               //                (uint16)normalized_data[SENSOR_HR];
               
               
                    // 通过串口输出七电感原始数据
                     sprintf(g_TxData, "%d,%d,%d,%d,%d,%d,%d\n",
                     value[0], 
                     value[1], 
                     value[2], 
                     value[3], 
                     value[4],
                     value[5],
                         value[6]);
                     uart_putstr(UART_4, g_TxData);
               
                     delay_ms(5);
               #endif  
  180   2      
  181   2        } 
  182   1      }
  183          
  184          
  185          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       634     ------
C251 COMPILER V5.60.0,  main                                                               13/05/25  11:31:27  PAGE 4   

  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        20     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        57     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
