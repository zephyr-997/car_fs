C251 COMPILER V5.60.0,  main                                                               09/05/25  21:10:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Out_File\main.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\main.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,S
                    -PEED) BROWSE INCDIR(..\CODE;..\USER\inc;..\USER\src;..\seekfree_components;..\seekfree_libraries;..\seekfree_peripheral;
                    -..\libraries) DEBUG PRINT(.\Out_File\main.lst) TABS(2) OBJECT(.\Out_File\main.obj) 

stmt  level    source

    1          #include "headfile.h"
    2          
    3          void main(void)
    4          {
    5   1        int state = 5;
    6   1        uint16 sum_value = 0;    //
    7   1        uint16 value[7] = {0};   //调试用数组
    8   1        
    9   1        board_init();     
   10   1        electromagnetic_init();  //初始化电磁传感器
   11   1        
   12   1        // ips114_init_simspi();          
   13   1        uart_init(UART_4, UART4_RX_P02, UART4_TX_P03, 115200, TIM_4);
   14   1        
   15   1        motor_init();
   16   1        encoder_init();
   17   1        
   18   1        imu963ra_init();
   19   1        
   20   1        pid_init(&LeftPID, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 5000.0f);
   21   1        pid_init(&RightPID, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 5000.0f);
   22   1        pid_init(&TurnPID, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 100.0f);
   23   1        
   24   1        LowPass_init(&leftSpeedFilt, 0.556);   //初始化低通滤波器
   25   1        LowPass_init(&rightSpeedFilt, 0.556);
   26   1        
   27   1        Kalman_Init(&imu693_kf, 0.98, 0.02, imu693kf_Q, imu693kf_R, 0.0);
   28   1        
   29   1        pit_timer_ms(TIM_1, 10);
   30   1        pit_timer_ms(TIM_2, 5);
   31   1        
   32   1        // ips114_clear_simspi(WHITE);   //清屏
   33   1        delay_ms(100); // 延时等待系统稳定
   34   1        
   35   1          while(1)
   36   1        {
   37   2          
   38   2          /* 串口接收 */
   39   2          if(g_RxPointer != 0)
   40   2          {
   41   3            int temp = g_RxPointer;
   42   3            delay_ms(4);
   43   3            if(temp == g_RxPointer)
   44   3            {
   45   4              uart4_interrupt_callback();
   46   4            }
   47   3          }
   48   2          
   49   2          
   50   2          /* 定时操作 */
   51   2          if (flag == 1)
   52   2          {
   53   3      //      if (g_SpeedPoint == 20)
   54   3      //      {
   55   3      //        g_SpeedPoint = 50;
   56   3      //      }
   57   3      //      else if (g_SpeedPoint == 50)
C251 COMPILER V5.60.0,  main                                                               09/05/25  21:10:29  PAGE 2   

   58   3      //      {
   59   3      //        g_SpeedPoint = 20;
   60   3      //      }
   61   3            
   62   3            flag = 0;
   63   3          }
   64   2          
   65   2          /* 按键处理 */
   66   2          key_task();
   67   2      
   68   2          if (uartSendFlag == 1)
   69   2          {
   70   3            // sprintf(g_TxData,"%d,%d,%d,%d,%d,%d,%ld,%ld\n",g_LeftPoint,g_EncoderLeft,g_RightPoint,g_EncoderRigh
             -t,position,(int)turn_pid,g_DutyLeft,g_DutyRight);
   71   3            // uart_putstr(UART_4, g_TxData);
   72   3            
   73   3      //      sprintf(g_TxData,"%d,%d,%d,%d\n",g_encoleft_init,g_encoright_init,g_EncoderLeft,g_EncoderRight);
   74   3      //      uart_putstr(UART_4, g_TxData);
   75   3            
   76   3      //      sprintf(g_TxData, "%f,%f\n",Gyro_Z,filtered_GyroZ);
   77   3      //      uart_putstr(UART_4, g_TxData);
   78   3            
   79   3            // 通过串口输出七电感数据
   80   3            sprintf(g_TxData, "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
   81   3             (uint16)normalized_data[SENSOR_HL], 
   82   3             (uint16)normalized_data[SENSOR_VL], 
   83   3             (uint16)normalized_data[SENSOR_HML], 
   84   3             (uint16)normalized_data[SENSOR_HC],
   85   3             (uint16)normalized_data[SENSOR_HMR], 
   86   3             (uint16)normalized_data[SENSOR_VR], 
   87   3             (uint16)normalized_data[SENSOR_HR], 
   88   3              position,
   89   3             (uint16)signal_strength_value,
   90   3              track_type,
   91   3              //track_route,
   92   3              track_type_zj); 
   93   3            uart_putstr(UART_4, g_TxData);
   94   3          }
   95   2          
   96   2          // 获取滤波后的ADC数据    
   97   2          mid_filter();      // 使用中位值滤波获取电感数据
   98   2      
   99   2      //    // 归一化电感数据
  100   2          normalize_sensors();
  101   2          
  102   2      //    // 计算位置偏差
  103   2          position = calculate_position_improved();
  104   2          
  105   2          //检查电磁保护  
  106   2          protection_flag = check_electromagnetic_protection();
  107   2      
  108   2          // if(protection_flag)
  109   2          // {
  110   2          //  // 触发保护，停车
  111   2          //  // 这里需要添加控制电机停止的代码
  112   2            
  113   2          //  // 显示保护触发信息
  114   2          //  ips114_showstr_simspi(0, 7, "Protection: Out of Track!");
  115   2            
  116   2          //  // 永久停止或等待重置
  117   2          //  while(1)                                                               
  118   2          //  {
  119   2          //    // 可以添加重置逻辑，例如按键检测
  120   2          //    // 如果需要重新启动，可以在这里添加条件
  121   2          //    delay_ms(100);
  122   2          //  }
C251 COMPILER V5.60.0,  main                                                               09/05/25  21:10:29  PAGE 3   

  123   2          // }
  124   2          
  125   2          // 显示电磁传感器数据
  126   2      //    display_electromagnetic_data();
  127   2      
  128   2          /*调试功能*/
  129   2      
  130   2           //读取七电感ADC值（用于调试）
  131   2      //      value[0] = adc_once(ADC_HL,  ADC_10BIT);
  132   2      //     value[1] = adc_once(ADC_VL,  ADC_10BIT);
  133   2      //     value[2] = adc_once(ADC_HML, ADC_10BIT);
  134   2      //     value[3] = adc_once(ADC_HC,  ADC_10BIT); 
  135   2      //    value[4] = adc_once(ADC_HMR, ADC_10BIT);
  136   2      //      value[5] = adc_once(ADC_VR,  ADC_10BIT);
  137   2      //     value[6] = adc_once(ADC_HR,  ADC_10BIT); 
  138   2      
  139   2          // 计算所有电感值的总和
  140   2      //    sum_value = (uint16)normalized_data[SENSOR_HL] + (uint16)normalized_data[SENSOR_VL] + 
  141   2      //                (uint16)normalized_data[SENSOR_HML] + (uint16)normalized_data[SENSOR_HC] + 
  142   2      //                (uint16)normalized_data[SENSOR_HMR] + (uint16)normalized_data[SENSOR_VR] + 
  143   2      //                (uint16)normalized_data[SENSOR_HR];
  144   2      
  145   2      
  146   2           // 通过串口输出七电感原始数据
  147   2      //      sprintf(g_TxData, "%d,%d,%d,%d,%d,%d,%d\n",
  148   2      //      value[0], 
  149   2      //      value[1], 
  150   2      //      value[2], 
  151   2      //      value[3], 
  152   2      //      value[4],
  153   2      //      value[5],
  154   2      //          value[6]);
  155   2      //      uart_putstr(UART_4, g_TxData);
  156   2      
  157   2      //      delay_ms(5);
  158   2          
  159   2        } 
  160   1      }
  161          
  162          
  163          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       582     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        20     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        48     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
