C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0,SP
                    -EED) BROWSE INCDIR(..\CODE;..\USER\inc;..\USER\src;..\seekfree_components;..\seekfree_libraries;..\seekfree_peripheral;.
                    -.\libraries) DEBUG PRINT(.\Out_File\isr.lst) TABS(2) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          // cursor-ignore-file
    2          ///******************************************************************************************************
             -***************
    3          // * COPYRIGHT NOTICE
    4          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    5          // * All rights reserved.
    6          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    7          // *
    8          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    9          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
   10          // *
   11          // * @file          isr
   12          // * @company       ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   13          // * @author        ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   14          // * @version       Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   15          // * @Software      MDK FOR C251 V5.60
   16          // * @Target core   STC32G12K128
   17          // * @Taobao        https://seekfree.taobao.com/
   18          // * @date          2020-4-14
   19          // ******************************************************************************************************
             -**************/
   20          #include "headfile.h"
   21          #include "encoder.h"
   22          #include "filter.h"
   23          #include "motor.h"
   24          #include "pid.h"
   25          #include "isr.h"
   26          #include "key.h"
   27          #include "electromagnetic_tracking.h"
   28          
   29          //void  INT0_Isr()  interrupt 0;
   30          //void  TM0_Isr()   interrupt 1;
   31          //void  INT1_Isr()  interrupt 2;
   32          //void  TM1_Isr()   interrupt 3;
   33          //void  UART1_Isr() interrupt 4;
   34          //void  ADC_Isr()   interrupt 5;
   35          //void  LVD_Isr()   interrupt 6;
   36          //void  PCA_Isr()   interrupt 7;
   37          //void  UART2_Isr() interrupt 8;
   38          //void  SPI_Isr()   interrupt 9;
   39          //void  INT2_Isr()  interrupt 10;
   40          //void  INT3_Isr()  interrupt 11;
   41          //void  TM2_Isr()   interrupt 12;
   42          //void  INT4_Isr()  interrupt 16;
   43          //void  UART3_Isr() interrupt 17;
   44          //void  UART4_Isr() interrupt 18;
   45          //void  TM3_Isr()   interrupt 19;
   46          //void  TM4_Isr()   interrupt 20;
   47          //void  CMP_Isr()   interrupt 21;
   48          //void  I2C_Isr()   interrupt 24;
   49          //void  USB_Isr()   interrupt 25;
   50          //void  PWM1_Isr()  interrupt 26;
   51          //void  PWM2_Isr()  interrupt 27;
   52          
   53          // ÂáΩÊï∞ÂâçÁΩÆÂ£∞Êòé
   54          void uart4_interrupt_callback(void);
   55          
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 2   

   56          // ÂÖ®Â±ÄÂèòÈáèÂÆö‰πâ
   57          float left_pid = 0, right_pid = 0;               // ÈÄüÂ∫¶ÁéØpidÁöÑÂ¢ûÈáèÔºåËøòÈúÄËΩ¨ÂåñÂÜçËµãÁªôÁîµÊú∫
   58          int32_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   59          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   60          float turn_pid = 0;
   61          int g_SpeedPoint = 50;
   62          int g_LeftPoint = 0;                             // Â∑¶ËΩÆÁõÆÊ†áÈÄüÂ∫¶                  
   63          int g_RightPoint = 0;                            // Âè≥ËΩÆÁõÆÊ†áÈÄüÂ∫¶             
   64          int count = 0, flag = 0;
   65          int turn_count = 0;
   66          
   67          float k = 0;
   68          int turnflag = 0;
   69          uint8_t startKeyFlag = 0, uartSendFlag = 1;
   70          
   71          // ËúÇÈ∏£Âô®ÊéßÂà∂Áõ∏ÂÖ≥ÂèòÈáè
   72          uint8_t beep_flag = 0;          // ËúÇÈ∏£Âô®ÂºÄÂêØÊ†áÂøóÔºå1Ë°®Á§∫ÂºÄÂêØ
   73          uint16_t beep_count = 0;        // ËúÇÈ∏£Âô®ËÆ°Êó∂ËÆ°Êï∞Âô®
   74          
   75          
   76          //UART1‰∏≠Êñ≠
   77          void UART1_Isr() interrupt 4
   78          {
   79   1      //    uint8 res;
   80   1      //  static uint8 dwon_count;
   81   1          if(UART1_GET_TX_FLAG)
   82   1          {
   83   2              UART1_CLEAR_TX_FLAG;
   84   2              busy[1] = 0;
   85   2          }
   86   1          if(UART1_GET_RX_FLAG)
   87   1          {
   88   2              UART1_CLEAR_RX_FLAG;
   89   2      //        res = SBUF;
   90   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   91   2      //        if(res == 0x7F)
   92   2      //        {
   93   2      //            if(dwon_count++ > 20)
   94   2      //                IAP_CONTR = 0x60;
   95   2      //        }
   96   2      //        else
   97   2      //        {
   98   2      //            dwon_count = 0;
   99   2      //        }
  100   2          }
  101   1      }
  102          
  103          
  104          
  105          //UART2‰∏≠Êñ≠
  106          void UART2_Isr() interrupt 8
  107          {
  108   1          if(UART2_GET_TX_FLAG)
  109   1        {
  110   2              UART2_CLEAR_TX_FLAG;
  111   2          busy[2] = 0;
  112   2        }
  113   1          if(UART2_GET_RX_FLAG)
  114   1        {
  115   2              UART2_CLEAR_RX_FLAG;
  116   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
  117   2      
  118   2      
  119   2        }
  120   1      }
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 3   

  121          
  122          
  123          //UART3‰∏≠Êñ≠
  124          void UART3_Isr() interrupt 17
  125          {
  126   1          if(UART3_GET_TX_FLAG)
  127   1        {
  128   2              UART3_CLEAR_TX_FLAG;
  129   2          busy[3] = 0;
  130   2        }
  131   1          if(UART3_GET_RX_FLAG)
  132   1        {
  133   2              UART3_CLEAR_RX_FLAG;
  134   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
  135   2      
  136   2        }
  137   1      }
  138          
  139          
  140          
  141          //UART4‰∏≠Êñ≠
  142          void UART4_Isr() interrupt 18
  143          {
  144   1          if(UART4_GET_TX_FLAG)
  145   1        {
  146   2              UART4_CLEAR_TX_FLAG;
  147   2          busy[4] = 0;
  148   2        }
  149   1          if(UART4_GET_RX_FLAG)
  150   1        {
  151   2              UART4_CLEAR_RX_FLAG;
  152   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  153   2      
  154   2          g_RxDat = S4BUF;
  155   2          g_RxData[g_RxPointer++] = g_RxDat;
  156   2        }
  157   1      }
  158          
  159          
  160          
  161          //Â§ñÈÉ®‰∏≠Êñ≠0
  162          void INT0_Isr() interrupt 0
  163          {
  164   1      
  165   1      }
  166          
  167          
  168          
  169          //Â§ñÈÉ®‰∏≠Êñ≠1
  170          void INT1_Isr() interrupt 2
  171          {
  172   1      
  173   1      }
  174          
  175          
  176          
  177          //Â§ñÈÉ®‰∏≠Êñ≠2
  178          void INT2_Isr() interrupt 10
  179          {
  180   1        INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  181   1        
  182   1      }
  183          
  184          
  185          
  186          //Â§ñÈÉ®‰∏≠Êñ≠3
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 4   

  187          void INT3_Isr() interrupt 11
  188          {
  189   1        INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  190   1        
  191   1      }
  192          
  193          
  194          
  195          //Â§ñÈÉ®‰∏≠Êñ≠4
  196          void INT4_Isr() interrupt 16
  197          {
  198   1        INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  199   1        
  200   1      }
  201          
  202          
  203          
  204          //ÂÆöÊó∂Âô®0‰∏≠Êñ≠
  205          void TM0_Isr() interrupt 1
  206          {
  207   1        
  208   1      }
  209          
  210          
  211          
  212          //ÂÆöÊó∂Âô®1‰∏≠Êñ≠
  213          void TM1_Isr() interrupt 3
  214          {
  215   1        int i = 0;
  216   1        
  217   1        key[0].state = P70;
  218   1        key[1].state = P71;
  219   1        key[2].state = P72;
  220   1        key[3].state = P73;
  221   1        
  222   1        for (i = 0; i < 4; i++)
  223   1        {
  224   2          switch (key[i].step)
  225   2          {
  226   3            case 0:
  227   3            {
  228   4              if (key[i].state == 0)
  229   4              {
  230   5                key[i].step = 1;
  231   5              }
  232   4            }
  233   3            break;
  234   3            
  235   3            case 1:
  236   3            {
  237   4              if (key[i].state == 0)
  238   4              {
  239   5                key[i].step = 2;
  240   5                key[i].flag = 1;
  241   5              }
  242   4              else
  243   4              {
  244   5                key[i].step = 0;
  245   5              }
  246   4            }
  247   3            break;
  248   3            
  249   3            case 2:
  250   3            {
  251   4              if (key[i].state == 1)
  252   4              {
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 5   

  253   5                key[i].step = 0;
  254   5              }
  255   4            }
  256   3            break;
  257   3          }
  258   2        }
  259   1        
  260   1        /* ÊôÆÈÄöÂÆöÊó∂ÂäüËÉΩÔºåÂ§áÁî® */
  261   1        count++;
  262   1        if (count >= 300) //3s
  263   1        {
  264   2          flag = 1;
  265   2          count = 0;
  266   2        }
  267   1      
  268   1          /* Ê£ÄÊµãËµõÈÅìÁ±ªÂûãÂèòÂåñÂπ∂ÊéßÂà∂ËúÇÈ∏£Âô® */
  269   1          if (track_type != track_type_last)
  270   1          {
  271   2              // ËµõÈÅìÁ±ªÂûãÂèëÁîüÂèòÂåñÔºåÂêØÂä®ËúÇÈ∏£Âô®
  272   2              beep_flag = 1;
  273   2              beep_count = 0;  // ÈáçÁΩÆËÆ°Êï∞Âô®
  274   2              P26 = 0;  // ÊâìÂºÄËúÇÈ∏£Âô®
  275   2              
  276   2              // Êõ¥Êñ∞‰∏ä‰∏ÄÊ¨°ËµõÈÅìÁ±ªÂûã
  277   2              track_type_last = track_type;
  278   2          }
  279   1          
  280   1          /* ËúÇÈ∏£Âô®ËÆ°Êó∂ÊéßÂà∂ */
  281   1          if (beep_flag)
  282   1          {
  283   2              beep_count++;
  284   2              // 10ms * 20 = 200ms
  285   2              if (beep_count >= 20)
  286   2              {
  287   3                  beep_count = 0;
  288   3                  beep_flag = 0;
  289   3                  P26 = 1;  // ÂÖ≥Èó≠ËúÇÈ∏£Âô®
  290   3              }
  291   2          } 
  292   1      }
  293          
  294          //ÂÆöÊó∂Âô®2‰∏≠Êñ≠
  295          void TM2_Isr() interrupt 12
  296          {
  297   1        TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  298   1        
  299   1        //ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº
  300   1        g_encoleft_init = get_left_encoder();
  301   1        g_encoright_init = get_right_encoder();
  302   1        
  303   1        imu963ra_get_gyro();
  304   1        Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  305   1        
  306   1      
  307   1        if (startKeyFlag == 1)
  308   1        {
  309   2          //ÂØπÁºñÁ†ÅÂô®ÁöÑÂÄºËøõË°åÊª§Ê≥¢
  310   2          g_EncoderLeft = LowPass_Filter(&leftSpeedFilt, g_encoleft_init);
  311   2          g_EncoderRight = LowPass_Filter(&rightSpeedFilt, g_encoright_init);
  312   2          
  313   2      //    if (track_type == 0 || (track_type == 3 && track_route_status == 2))//ÊôÆÈÄöÁõ¥Á∫øÊàñËÄÖÂúÜÁéØÂÜÖÈÉ®
  314   2      //    {
  315   2            /* 5msÁÆó‰∏ÄÊ¨°ÂÜÖÁéØÔºå15msÁÆó‰∏ÄÊ¨°Â§ñÁéØ */
  316   2            turn_count++;
  317   2            if (turn_count >= 3)
  318   2            {
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 6   

  319   3              filtered_GyroZ = Kalman_Update(&imu693_kf, Gyro_Z);//ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢
  320   3              
  321   3      //        turn_pid = pid_poisitional_normal(&TurnPID, position);
  322   3              turn_pid = pid_poisitional_quadratic(&TurnPID, position, filtered_GyroZ);
  323   3              
  324   3              Kalman_Predict(&imu693_kf, turn_pid);//Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢Âô®ÁöÑÂÄº
  325   3              
  326   3              turn_count = 0;
  327   3            }
  328   2            
  329   2            if(turn_pid >= 0) // Â∑¶ËΩ¨
  330   2            {
  331   3              k = turn_pid * 0.01; // Áº©ÊîæËá≥ 0.0 ~ 1.0
  332   3              g_LeftPoint = g_SpeedPoint * (1 - k);
  333   3              g_RightPoint = g_SpeedPoint * (1 + k * 0.5); // Âä†Â∞ëÂáèÂ§ö
  334   3            }
  335   2            else // Âè≥ËΩ¨
  336   2            {
  337   3              k = -turn_pid * 0.01; // ÂèñÁõ∏ÂèçÊï∞Âπ∂Áº©ÊîæËá≥ 0.0 ~ 1.0
  338   3              g_LeftPoint = g_SpeedPoint * (1 + k * 0.5); // Âä†Â∞ëÂáèÂ§ö
  339   3              g_RightPoint = g_SpeedPoint * (1 - k);
  340   3            }
  341   2            
  342   2      //    }
  343   2      //    else if (track_type == 3 && track_route_status == 1)//ÂúÜÁéØÂáÜÂ§áÂÖ•ÁéØ
  344   2      //    {
  345   2      //      if (track_route == 1)//Â∑¶ÁéØ
  346   2      //      {
  347   2      //        g_LeftPoint = g_SpeedPoint * 0.8;
  348   2      //        g_RightPoint = g_SpeedPoint * 1.2;
  349   2      //      }
  350   2      //      else if (track_route == 2)//Âè≥ÁéØ
  351   2      //      {
  352   2      //        g_LeftPoint = g_SpeedPoint * 1.2;
  353   2      //        g_RightPoint = g_SpeedPoint * 0.8;
  354   2      //      }
  355   2      //      
  356   2      //      g_IntEncoderL += g_EncoderLeft;
  357   2      //      g_IntEncoderR += g_EncoderRight;
  358   2      //      
  359   2      //      if ((g_IntEncoderL + g_IntEncoderR) / 2 > 15800)
  360   2      //      {
  361   2      //        track_route_status = 2;
  362   2      //        
  363   2      //        g_IntEncoderL = g_IntEncoderR = 0;
  364   2      //        
  365   2      //        P52 = 1;
  366   2      //      }
  367   2      //    }
  368   2      //    else if (track_type == 3 && track_route_status == 3)//ÂúÜÁéØÂáÜÂ§áÂá∫ÁéØ
  369   2      //    {
  370   2      //      if (track_route == 1)//Â∑¶ÁéØ
  371   2      //      {
  372   2      //        g_LeftPoint = g_SpeedPoint * 0.8;
  373   2      //        g_RightPoint = g_SpeedPoint * 1.2;
  374   2      //      }
  375   2      //      else if (track_route == 2)//Âè≥ÁéØ
  376   2      //      {
  377   2      //        g_LeftPoint = g_SpeedPoint * 1.2;
  378   2      //        g_RightPoint = g_SpeedPoint * 0.8;
  379   2      //      }
  380   2      //      
  381   2      //      if ((g_IntEncoderL + g_IntEncoderR) / 2 > 16200)
  382   2      //      {
  383   2      //        track_type = 0;
  384   2      //        track_route = 0;
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 7   

  385   2      //        track_route_status = 0;
  386   2      //        
  387   2      //        g_IntEncoderL = g_IntEncoderR = 0;
  388   2      //        
  389   2      //        P52 = 1;
  390   2      //      }
  391   2      //    }
  392   2          
  393   2          //ËÆ°ÁÆóÈÄüÂ∫¶ÁéØpid
  394   2          left_pid = pid_increment_feedforward(&LeftPID, g_EncoderLeft, g_LeftPoint);
  395   2          right_pid = pid_increment_feedforward(&RightPID, g_EncoderRight, g_RightPoint);
  396   2          
  397   2          //ËΩ¨int
  398   2          g_DutyLeft = (int32_t)left_pid;
  399   2          g_DutyRight = (int32_t)right_pid;
  400   2        
  401   2          if (protection_flag == 1)
  402   2          {
  403   3            LeftPID.output = LeftPID.lasterror = LeftPID.preverror = 0;
  404   3            RightPID.output = RightPID.lasterror = RightPID.preverror = 0;
  405   3            uartSendFlag = 0;
  406   3            
  407   3            set_motor_pwm(0, 0);
  408   3          }
  409   2          else
  410   2          {
  411   3            set_motor_pwm(g_DutyLeft, g_DutyRight);
  412   3          }
  413   2        }
  414   1      }
  415          
  416          
  417          
  418          //ÂÆöÊó∂Âô®3‰∏≠Êñ≠
  419          void TM3_Isr() interrupt 19
  420          {
  421   1        TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  422   1        
  423   1      }
  424          
  425          
  426          
  427          //ÂÆöÊó∂Âô®4‰∏≠Êñ≠
  428          void TM4_Isr() interrupt 20
  429          {
  430   1        TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  431   1      
  432   1      
  433   1      }
  434          
  435          
  436          //void  INT0_Isr()  interrupt 0;
  437          //void  TM0_Isr()   interrupt 1;
  438          //void  INT1_Isr()  interrupt 2;
  439          //void  TM1_Isr()   interrupt 3;
  440          //void  UART1_Isr() interrupt 4;
  441          //void  ADC_Isr()   interrupt 5;
  442          //void  LVD_Isr()   interrupt 6;
  443          //void  PCA_Isr()   interrupt 7;
  444          //void  UART2_Isr() interrupt 8;
  445          //void  SPI_Isr()   interrupt 9;
  446          //void  INT2_Isr()  interrupt 10;
  447          //void  INT3_Isr()  interrupt 11;
  448          //void  TM2_Isr()   interrupt 12;
  449          //void  INT4_Isr()  interrupt 16;
  450          //void  UART3_Isr() interrupt 17;
C251 COMPILER V5.60.0,  isr                                                                09/05/25  21:10:29  PAGE 8   

  451          //void  UART4_Isr() interrupt 18;
  452          //void  TM3_Isr()   interrupt 19;
  453          //void  TM4_Isr()   interrupt 20;
  454          //void  CMP_Isr()   interrupt 21;
  455          //void  I2C_Isr()   interrupt 24;
  456          //void  USB_Isr()   interrupt 25;
  457          //void  PWM1_Isr()  interrupt 26;
  458          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1218     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        53     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       127     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
