C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\Out_File\isr.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\isr.c XSMALL INTR2 FLOAT64 WARNINGLEVEL(3)
                    - OPTIMIZE(0,SPEED) BROWSE INCDIR(..\CODE;..\USER\inc;..\USER\src;..\seekfree_components;..\seekfree_libraries;..\seekfre
                    -e_peripheral;..\libraries) DEBUG PRINT(.\Out_File\isr.lst) TABS(2) OBJECT(.\Out_File\isr.obj) 

stmt  level    source

    1          // cursor-ignore-file
    2          ///******************************************************************************************************
             -***************
    3          // * COPYRIGHT NOTICE
    4          // * Copyright (c) 2020,ÈÄêÈ£ûÁßëÊäÄ
    5          // * All rights reserved.
    6          // * ÊäÄÊúØËÆ®ËÆ∫QQÁæ§Ôºö‰∏ÄÁæ§Ôºö179029047(Â∑≤Êª°)  ‰∫åÁæ§Ôºö244861897(Â∑≤Êª°)  ‰∏âÁæ§Ôºö824575535
    7          // *
    8          // * ‰ª•‰∏ãÊâÄÊúâÂÜÖÂÆπÁâàÊùÉÂùáÂ±ûÈÄêÈ£ûÁßëÊäÄÊâÄÊúâÔºåÊú™ÁªèÂÖÅËÆ∏‰∏çÂæóÁî®‰∫éÂïÜ‰∏öÁî®ÈÄîÔºå
    9          // * Ê¨¢ËøéÂêÑ‰Ωç‰ΩøÁî®Âπ∂‰º†Êí≠Êú¨Á®ãÂ∫èÔºå‰øÆÊîπÂÜÖÂÆπÊó∂ÂøÖÈ°ª‰øùÁïôÈÄêÈ£ûÁßëÊäÄÁöÑÁâàÊùÉÂ£∞Êòé„ÄÇ
   10          // *
   11          // * @file          isr
   12          // * @company       ÊàêÈÉΩÈÄêÈ£ûÁßëÊäÄÊúâÈôêÂÖ¨Âè∏
   13          // * @author        ÈÄêÈ£ûÁßëÊäÄ(QQ790875685)
   14          // * @version       Êü•ÁúãdocÂÜÖversionÊñá‰ª∂ ÁâàÊú¨ËØ¥Êòé
   15          // * @Software      MDK FOR C251 V5.60
   16          // * @Target core   STC32G12K128
   17          // * @Taobao        https://seekfree.taobao.com/
   18          // * @date          2020-4-14
   19          // ******************************************************************************************************
             -**************/
   20          #include "headfile.h"
   21          #include "encoder.h"
   22          #include "filter.h"
   23          #include "motor.h"
   24          #include "pid.h"
   25          #include "isr.h"
   26          #include "key.h"
   27          #include "electromagnetic_tracking.h"
   28          
   29          
   30          //void  INT0_Isr()  interrupt 0;
   31          //void  TM0_Isr()   interrupt 1;
   32          //void  INT1_Isr()  interrupt 2;
   33          //void  TM1_Isr()   interrupt 3;
   34          //void  UART1_Isr() interrupt 4;
   35          //void  ADC_Isr()   interrupt 5;
   36          //void  LVD_Isr()   interrupt 6;
   37          //void  PCA_Isr()   interrupt 7;
   38          //void  UART2_Isr() interrupt 8;
   39          //void  SPI_Isr()   interrupt 9;
   40          //void  INT2_Isr()  interrupt 10;
   41          //void  INT3_Isr()  interrupt 11;
   42          //void  TM2_Isr()   interrupt 12;
   43          //void  INT4_Isr()  interrupt 16;
   44          //void  UART3_Isr() interrupt 17;
   45          //void  UART4_Isr() interrupt 18;
   46          //void  TM3_Isr()   interrupt 19;
   47          //void  TM4_Isr()   interrupt 20;
   48          //void  CMP_Isr()   interrupt 21;
   49          //void  I2C_Isr()   interrupt 24;
   50          //void  USB_Isr()   interrupt 25;
   51          //void  PWM1_Isr()  interrupt 26;
   52          //void  PWM2_Isr()  interrupt 27;
   53          
   54          // ÂáΩÊï∞ÂâçÁΩÆÂ£∞Êòé
   55          void uart4_interrupt_callback(void);
C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 2   

   56          
   57          // ÂÖ®Â±ÄÂèòÈáèÂÆö‰πâ
   58          float left_pid = 0, right_pid = 0;               // ÈÄüÂ∫¶ÁéØpidÁöÑÂ¢ûÈáèÔºåËøòÈúÄËΩ¨ÂåñÂÜçËµãÁªôÁîµÊú∫
   59          int16_t g_DutyLeft = 0, g_DutyRight = 0;         // ÊúÄÂêéÁúüÊ≠£Ë¶ÅÁªôÁîµÊú∫ÁöÑPWMÂÄº
   60          float Gyro_Z = 0, filtered_GyroZ = 0;            // ÈôÄËû∫‰ª™ËßíÈÄüÂ∫¶ÁöÑÂéüÂßãÂÄºÂíåÂç°Â∞îÊõºÊª§Ê≥¢‰πãÂê
             -éÁöÑÂÄº
   61          float turn_pid = 0;
   62          int g_SpeedPoint = 100;
   63          int g_LeftPoint = 100;                             // Â∑¶ËΩÆÁõÆÊ†áÈÄüÂ∫¶                  
   64          int g_RightPoint = 100;                            // Âè≥ËΩÆÁõÆÊ†áÈÄüÂ∫¶             
   65          int count = 0, flag = 0;
   66          
   67          //UART1‰∏≠Êñ≠
   68          void UART1_Isr() interrupt 4
   69          {
   70   1      //    uint8 res;
   71   1      //  static uint8 dwon_count;
   72   1          if(UART1_GET_TX_FLAG)
   73   1          {
   74   2              UART1_CLEAR_TX_FLAG;
   75   2              busy[1] = 0;
   76   2          }
   77   1          if(UART1_GET_RX_FLAG)
   78   1          {
   79   2              UART1_CLEAR_RX_FLAG;
   80   2      //        res = SBUF;
   81   2      //        //Á®ãÂ∫èËá™Âä®‰∏ãËΩΩ
   82   2      //        if(res == 0x7F)
   83   2      //        {
   84   2      //            if(dwon_count++ > 20)
   85   2      //                IAP_CONTR = 0x60;
   86   2      //        }
   87   2      //        else
   88   2      //        {
   89   2      //            dwon_count = 0;
   90   2      //        }
   91   2          }
   92   1      }
   93          
   94          
   95          
   96          //UART2‰∏≠Êñ≠
   97          void UART2_Isr() interrupt 8
   98          {
   99   1          if(UART2_GET_TX_FLAG)
  100   1        {
  101   2              UART2_CLEAR_TX_FLAG;
  102   2          busy[2] = 0;
  103   2        }
  104   1          if(UART2_GET_RX_FLAG)
  105   1        {
  106   2              UART2_CLEAR_RX_FLAG;
  107   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS2BUF
  108   2      
  109   2      
  110   2        }
  111   1      }
  112          
  113          
  114          //UART3‰∏≠Êñ≠
  115          void UART3_Isr() interrupt 17
  116          {
  117   1          if(UART3_GET_TX_FLAG)
  118   1        {
  119   2              UART3_CLEAR_TX_FLAG;
  120   2          busy[3] = 0;
C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 3   

  121   2        }
  122   1          if(UART3_GET_RX_FLAG)
  123   1        {
  124   2              UART3_CLEAR_RX_FLAG;
  125   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS3BUF
  126   2      
  127   2        }
  128   1      }
  129          
  130          
  131          
  132          //UART4‰∏≠Êñ≠
  133          void UART4_Isr() interrupt 18
  134          {
  135   1          if(UART4_GET_TX_FLAG)
  136   1        {
  137   2              UART4_CLEAR_TX_FLAG;
  138   2          busy[4] = 0;
  139   2        }
  140   1          if(UART4_GET_RX_FLAG)
  141   1        {
  142   2              UART4_CLEAR_RX_FLAG;
  143   2          //Êé•Êî∂Êï∞ÊçÆÂØÑÂ≠òÂô®‰∏∫ÔºöS4BUF;
  144   2      
  145   2          g_RxDat = S4BUF;
  146   2          g_RxData[g_RxPointer++] = g_RxDat;
  147   2        }
  148   1      }
  149          
  150          
  151          
  152          //Â§ñÈÉ®‰∏≠Êñ≠0
  153          void INT0_Isr() interrupt 0
  154          {
  155   1      
  156   1      }
  157          
  158          
  159          
  160          //Â§ñÈÉ®‰∏≠Êñ≠1
  161          void INT1_Isr() interrupt 2
  162          {
  163   1      
  164   1      }
  165          
  166          
  167          
  168          //Â§ñÈÉ®‰∏≠Êñ≠2
  169          void INT2_Isr() interrupt 10
  170          {
  171   1        INT2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  172   1        
  173   1      }
  174          
  175          
  176          
  177          //Â§ñÈÉ®‰∏≠Êñ≠3
  178          void INT3_Isr() interrupt 11
  179          {
  180   1        INT3_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  181   1        
  182   1      }
  183          
  184          
  185          
  186          //Â§ñÈÉ®‰∏≠Êñ≠4
C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 4   

  187          void INT4_Isr() interrupt 16
  188          {
  189   1        INT4_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  190   1        
  191   1      }
  192          
  193          
  194          
  195          //ÂÆöÊó∂Âô®0‰∏≠Êñ≠
  196          void TM0_Isr() interrupt 1
  197          {
  198   1        
  199   1      }
  200          
  201          
  202          
  203          //ÂÆöÊó∂Âô®1‰∏≠Êñ≠
  204          void TM1_Isr() interrupt 3
  205          {
  206   1        int i = 0;
  207   1        
  208   1        key[0].state = P70;
  209   1        key[1].state = P71;
  210   1        key[2].state = P72;
  211   1        key[3].state = P73;
  212   1        
  213   1        for (i = 0; i < 4; i++)
  214   1        {
  215   2          switch (key[i].step)
  216   2          {
  217   3            case 0:
  218   3            {
  219   4              if (key[i].state == 0)
  220   4              {
  221   5                key[i].step = 1;
  222   5              }
  223   4            }
  224   3            break;
  225   3            
  226   3            case 1:
  227   3            {
  228   4              if (key[i].state == 0)
  229   4              {
  230   5                key[i].step = 2;
  231   5                key[i].flag = 1;
  232   5              }
  233   4              else
  234   4              {
  235   5                key[i].step = 0;
  236   5              }
  237   4            }
  238   3            break;
  239   3            
  240   3            case 2:
  241   3            {
  242   4              if (key[i].state == 1)
  243   4              {
  244   5                key[i].step = 0;
  245   5              }
  246   4            }
  247   3            break;
  248   3          }
  249   2        }
  250   1      }
  251          
  252          
C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 5   

  253          //ÂÆöÊó∂Âô®2‰∏≠Êñ≠
  254          void TM2_Isr() interrupt 12
  255          {
  256   1        TIM2_CLEAR_FLAG;  //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  257   1        
  258   1        /* ÊôÆÈÄöÂÆöÊó∂ÂäüËÉΩÔºåÂ§áÁî® */
  259   1        count++;
  260   1        if (count >= 300)
  261   1        {
  262   2          flag = 1;
  263   2          count = 0;
  264   2        }
  265   1        
  266   1        //ËØªÂèñÂπ∂Ê∏ÖÈô§ÁºñÁ†ÅÂô®ÁöÑÂÄº
  267   1        g_EncoderLeft = get_left_encoder();
  268   1        g_EncoderRight = get_right_encoder();
  269   1        
  270   1        /*
  271   1          ËØªÂèñËßíÈÄüÂ∫¶Âπ∂ËΩ¨Âåñ‰∏∫ÂÆûÈôÖÁâ©ÁêÜÊï∞ÊçÆ
  272   1          ÂΩìÁ™ÅÁÑ∂Â∑¶ËΩ¨ÔºåGyro_Z‰∏∫Ê≠£ÂÄºÔºõÁ™ÅÁÑ∂Âè≥ËΩ¨ÔºåGyro_Z‰∏∫Ë¥üÂÄº
  273   1        */
  274   1      //  imu963ra_get_gyro();
  275   1      //  Gyro_Z = imu963ra_gyro_transition(imu963ra_gyro_z);
  276   1        
  277   1        //ÂØπGyro_ZËøõË°åÂç°Â∞îÊõºÊª§Ê≥¢
  278   1      //  filtered_GyroZ = Kalman_Update(&imu693_kf, Gyro_Z);
  279   1        
  280   1        //ËÆ°ÁÆóËΩ¨ÂêëÁéØpid,Âè≥Ê≠£
  281   1      //  turn_pid = pid_poisitional_quadratic(&TurnPID, position, filtered_GyroZ);
  282   1        
  283   1        if (protection_flag == 1)
  284   1        {
  285   2          turn_pid = pid_poisitional_normal(&TurnPID, position * 0.01);
  286   2        
  287   2        //Êõ¥Êñ∞Âç°Â∞îÊõºÊª§Ê≥¢ÁöÑÂÄº
  288   2      //  Kalman_Predict(&imu693_kf, turn_pid);
  289   2        
  290   2        //
  291   2      //  g_LeftPoint = g_SpeedPoint - turn_pid;
  292   2      //  g_RightPoint = g_SpeedPoint + turn_pid;
  293   2        
  294   2        //
  295   2        
  296   2        
  297   2          g_LeftPoint -= turn_pid;
  298   2          g_RightPoint += turn_pid;
  299   2          
  300   2          if (g_LeftPoint > 150)
  301   2          {
  302   3            g_LeftPoint = 150;
  303   3          }
  304   2          if (g_RightPoint < -150)
  305   2          {
  306   3            g_RightPoint = -150;
  307   3          }
  308   2          if (g_LeftPoint > 150)
  309   2          {
  310   3            g_LeftPoint = 150;
  311   3          }
  312   2          if (g_RightPoint < -150)
  313   2          {
  314   3            g_RightPoint = -150;
  315   3          }
  316   2        
  317   2        
  318   2        //ËÆ°ÁÆóÈÄüÂ∫¶ÁéØpid
C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 6   

  319   2        left_pid = pid_increment_feedforward(&LeftPID, g_EncoderLeft, g_LeftPoint);
  320   2        right_pid = pid_increment_feedforward(&RightPID, g_EncoderRight, g_RightPoint);
  321   2        
  322   2        //ËΩ¨int
  323   2        g_DutyLeft = (int16_t)left_pid;
  324   2        g_DutyRight = (int16_t)right_pid;
  325   2        
  326   2        // if (protection_flag == 0)
  327   2        // {
  328   2        //  set_motor_pwm(g_DutyLeft, g_DutyRight);
  329   2        // }
  330   2        // else
  331   2        // {
  332   2        //  set_motor_pwm(0, 0);
  333   2        // }
  334   2        
  335   2        set_motor_pwm(g_DutyLeft , g_DutyRight);
  336   2        }
  337   1      }
  338          
  339          
  340          
  341          //ÂÆöÊó∂Âô®3‰∏≠Êñ≠
  342          void TM3_Isr() interrupt 19
  343          {
  344   1        TIM3_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  345   1        
  346   1      }
  347          
  348          
  349          
  350          //ÂÆöÊó∂Âô®4‰∏≠Êñ≠
  351          void TM4_Isr() interrupt 20
  352          {
  353   1        TIM4_CLEAR_FLAG; //Ê∏ÖÈô§‰∏≠Êñ≠Ê†áÂøó
  354   1      
  355   1      
  356   1      }
  357          
  358          
  359          //void  INT0_Isr()  interrupt 0;
  360          //void  TM0_Isr()   interrupt 1;
  361          //void  INT1_Isr()  interrupt 2;
  362          //void  TM1_Isr()   interrupt 3;
  363          //void  UART1_Isr() interrupt 4;
  364          //void  ADC_Isr()   interrupt 5;
  365          //void  LVD_Isr()   interrupt 6;
  366          //void  PCA_Isr()   interrupt 7;
  367          //void  UART2_Isr() interrupt 8;
  368          //void  SPI_Isr()   interrupt 9;
  369          //void  INT2_Isr()  interrupt 10;
  370          //void  INT3_Isr()  interrupt 11;
  371          //void  TM2_Isr()   interrupt 12;
  372          //void  INT4_Isr()  interrupt 16;
  373          //void  UART3_Isr() interrupt 17;
  374          //void  UART4_Isr() interrupt 18;
  375          //void  TM3_Isr()   interrupt 19;
  376          //void  TM4_Isr()   interrupt 20;
  377          //void  CMP_Isr()   interrupt 21;
  378          //void  I2C_Isr()   interrupt 24;
  379          //void  USB_Isr()   interrupt 25;
  380          //void  PWM1_Isr()  interrupt 26;
  381          //void  PWM2_Isr()  interrupt 27;


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.60.0,  isr                                                                25/04/25  23:15:33  PAGE 7   

  code size            =       949     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        36     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        82     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
