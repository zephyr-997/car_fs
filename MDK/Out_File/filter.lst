C251 COMPILER V5.60.0,  filter                                                             13/05/25  11:27:02  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE filter
OBJECT MODULE PLACED IN .\Out_File\filter.obj
COMPILER INVOKED BY: D:\Software\Keil5\c251v560\C251\BIN\C251.EXE ..\USER\src\filter.c XSMALL WARNINGLEVEL(3) OPTIMIZE(0
                    -,SPEED) BROWSE INCDIR(..\CODE;..\USER\inc;..\USER\src;..\seekfree_components;..\seekfree_libraries;..\seekfree_periphera
                    -l;..\libraries) DEBUG PRINT(.\Out_File\filter.lst) TABS(2) OBJECT(.\Out_File\filter.obj) 

stmt  level    source

    1          #include "../inc/filter.h"
    2          
    3          
    4          const float imu693kf_Q = 0.17;
    5          const float imu693kf_R = 0.20;
    6          
    7          
    8          KalmanFilter imu693_kf;
    9          
   10          LowPassFilter leftSpeedFilt;
   11          LowPassFilter rightSpeedFilt;
   12          
   13          
   14          void Kalman_Init(KalmanFilter* kf, float F, float B, float Q, float R, float initial_x)
   15          {
   16   1          kf->F = F;
   17   1          kf->B = B;
   18   1          kf->Q = Q;
   19   1          kf->R = R;
   20   1          kf->P = 1.0;       // 初始协方差
   21   1          kf->x = initial_x;
   22   1      }
   23          
   24          void Kalman_Predict(KalmanFilter* kf, float u)
   25          {
   26   1          kf->x = kf->F * kf->x + kf->B * u;
   27   1          kf->P = kf->F * kf->P * kf->F + kf->Q;
   28   1      }
   29          
   30          float Kalman_Update(KalmanFilter* kf, float z)
   31          {
   32   1          kf->K = kf->P / (kf->P + kf->R);
   33   1          kf->x += kf->K * (z - kf->x);
   34   1          kf->P *= (1 - kf->K);
   35   1          return kf->x;
   36   1      }
   37          
   38          void LowPass_init(LowPassFilter* instance, float alpha)
   39          {
   40   1        instance->alpha = alpha;
   41   1        instance->output = 0;
   42   1        instance->lastoutput = 0;
   43   1      }
   44          
   45          float LowPass_Filter(LowPassFilter* instance, float input) 
   46          {
   47   1          // 实现一阶低通滤波的核心算法
   48   1          instance->output = instance->alpha * input + (1 - instance->alpha) * instance->lastoutput;
   49   1          
   50   1          // 更新上一时刻的输入值
   51   1          instance->lastoutput = instance->output;
   52   1          
   53   1          return instance->output;
   54   1      }


Module Information          Static   Overlayable
------------------------------------------------
C251 COMPILER V5.60.0,  filter                                                             13/05/25  11:27:02  PAGE 2   

  code size            =       679     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       108     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         8     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
